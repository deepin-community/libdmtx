From: Roberto Lumbreras
Subject: fix hyphens used instead of minus signs in manpages

Index: libdmtx-0.7.5/man/libdmtx.3
===================================================================
--- libdmtx-0.7.5.orig/man/libdmtx.3	2018-08-08 16:37:12.393755603 +0200
+++ libdmtx-0.7.5/man/libdmtx.3	2018-08-08 16:37:12.389755582 +0200
@@ -9,14 +9,14 @@
 .SH SYNOPSIS
 \fB#include <dmtx.h>\fP
 
-cc file.c -ldmtx
+cc file.c \-ldmtx
 
 .SH DESCRIPTION
 \fIlibdmtx\fP is a software library that enables programs to read and write Data Matrix barcodes of the modern ECC200 variety. The library runs natively on several platforms, and can be accessed by multiple languages using the libdmtx language wrappers. The utility programs \fIdmtxread\fP and \fIdmtxwrite\fP provide a command line interface for libdmtx, and serve as a good reference for developers writing their own libdmtx-enabled programs.
 
 Data Matrix barcodes store data as a pattern of ON and OFF modules (often black on white) in a grid pattern that resembles a checkerboard. Like other 2D symbologies, Data Matrix barcodes have a large data capacity compared to their traditional 1D cousins, and employ sophisticated error correction techniques. Data Matrix barcodes can be square or rectangle in shape, and offer several encodation schemes for optimized storage of text and/or binary data. The Data Matrix symbology was invented and released into the public domain by RVSI Acuity CiMatrix.
 
-.SH ENCODING - Generating Data Matrix Barcodes
+.SH ENCODING \- Generating Data Matrix Barcodes
 C/C++ programs can generate a barcode with just a few basic calls to libdmtx:
 
 1. Call \fBdmtxEncodeCreate()\fP
@@ -35,7 +35,7 @@
 
 Releases memory allocated during the encoding process.
 
-.SH DECODING - Reading Data Matrix Barcodes
+.SH DECODING \- Reading Data Matrix Barcodes
 Barcode reading takes more steps than barcode generation, mainly because libdmtx must find a barcode region before it can decode the message. However, this too is a relatively simple process that uses 4 main structures:
 
 \fBDmtxImage\fP holds image properties and a pointer to pixel data held by the calling program.
@@ -120,13 +120,13 @@
 
      /* 2) COPY the new image data before releasing encoding memory */
 
-     width = dmtxImageGetProp(enc->image, DmtxPropWidth);
-     height = dmtxImageGetProp(enc->image, DmtxPropHeight);
-     bytesPerPixel = dmtxImageGetProp(enc->image, DmtxPropBytesPerPixel);
+     width = dmtxImageGetProp(enc\->image, DmtxPropWidth);
+     height = dmtxImageGetProp(enc\->image, DmtxPropHeight);
+     bytesPerPixel = dmtxImageGetProp(enc\->image, DmtxPropBytesPerPixel);
 
      pxl = (unsigned char *)malloc(width * height * bytesPerPixel);
      assert(pxl != NULL);
-     memcpy(pxl, enc->image->pxl, width * height * bytesPerPixel);
+     memcpy(pxl, enc\->image\->pxl, width * height * bytesPerPixel);
 
      dmtxEncodeDestroy(&enc);
 
@@ -143,7 +143,7 @@
         msg = dmtxDecodeMatrixRegion(dec, reg, DmtxUndefined);
         if(msg != NULL) {
            fputs("output: \\"", stdout);
-           fwrite(msg->output, sizeof(unsigned char), msg->outputIdx, stdout);
+           fwrite(msg\->output, sizeof(unsigned char), msg\->outputIdx, stdout);
            fputs("\\"\\n", stdout);
            dmtxMessageDestroy(&msg);
         }
